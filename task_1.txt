Требуется написать программный функциональный эмулятор TCAM
(Ternary Content Addressable Memory https://en.wikipedia.org/wiki/Content-addressable_memory#Ternary_CAMs)

Программа должна иметь следующий интерфейс командной строки:
------------------------------------------------------------

tcam_emu [-i <interations>] [-a <alg>] -s <width> <data-file> <req-file>

<iterations> - количество повторов
Если -i не указана, то поиск для всех записей <req-file> происходит однократно,
потом в stdout выводятся результаты поиска.
Если -i указана, то поиск для всех записей <req-file> происходит <iterations>
раз. После этого выводится максимальное, минимальное и среднее значения 
времени для запросов к TCAM.

<alg> текстовый идентификатор алгоритма
На первом этапе алгоритм должен быть один, но подразумевается,
что алгоритмов может быть несколько, и можно будет сравнивать 
их производительность.

<width> размер записи TCAM в битах

<data-file> данные для инициализации TCAM
Файл текстовый с HEX-строчками, одна запись TCAM - две строки.
Первая строчка определяет "обычные" биты, вторая "don't care"-биты.
Неиспользуемые биты заполняются нулями справа.
Пример для width=17
Запись TCAM:
1xx0 0000 1111 1x01 1
Содержимое файла:
80F980
600400

<req-file> запросы на поиск
Тоже файл с HEX-строчками, но по одной на запрос, т.к. это
обычные бинарные данные.

Формат вывода - строки с результатом поиска в следующем формате:
N: match data
Где N - номер записи (адрес) TCAM, match - значение TCAM по этому адресу в 
троичном виде (0/1/x), data - совпавшие данные в бинарном виде.
Пример:

00FE: 0011xxxx 00111010

Внутренний интерфейс для доступа к TCAM:
----------------------------------------

Для того, чтобы сравнивать разные алгоритмы поиска, должен быть определен
внутренний API для реализации TCAM. Замена/добавление алгоритма
не должна приводить к изменению общей части (занимающейся чтением файлов,
замерами, выводом результатов).
API должен иметь как минимум следующие функции:
а) Создание TCAM с фиксированным количеством и размером записей.
б) Добавление записи TCAM по адресу.
в) Получение адреса записи по значению.
г) Полученине записи по адресу.
д) Удаление TCAM.

Дополнительные условия
----------------------

На первом этапе алгоритм поиска может быть самым простым, требований
к скорости поиска нет.
В замерах производительности нужно учитывать только скорость поиска (выше это
обозначено как функция в) внутреннего API). Время на чтение файла,
инициализацию TCAM, вывод результатов учитывать не надо.
Язык программирования C или C++.

